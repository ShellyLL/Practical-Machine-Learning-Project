## Tow group intervals
# x_oc = 132.86, s_oc = 15.34; x_c = 127.44, s_c = 18.23
sp <- sqrt((7*15.34^2 + 20*18.23^2) / (8 + 21 - 2))
132.86 - 127.44 + c(-1, 1)*qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
data(sleep)
x1 <- sleep$extra[sleep$group == 1]
x2 <- sleep$extra[sleep$group == 2]
n1 <- length(x1)
n2 <- length(x2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2 - 1) * sd(x2)^2) / (n1 + n2 - 2))
md <- mean(x1) - mean(x2)
semd <- sp * sqrt(1 / n1 + 1 / n2)
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd
t.test(x1, x2, paired = F, var.equal = T)$conf
# t.test(x1, x2, paired = F, var.equal = F)$conf
## Hypothesis testing
# Usage: Make decisions using data
# T test in R
library(UsingR)
data(father.son)
t.test(father.son$sheight - father.son$fheight)
install.packages('UsingR')
n <- 40
lambda <- 0.2
set.seed(2)
nsim <- 1000
simulation <- rowMeans(matrix(rexp(n*nsim, lambda), nsim, n))
?scale
#hist(simulation)
#lines(density(simulation))
# expscale <- scale(expdist)
hist(simulation,probability=T)
lines(density(expscale))
# Compare with the standard normal distribution
curve(dnorm(x,0,1), -3, 3, col="red", add=T)
#hist(simulation)
#lines(density(simulation))
# expscale <- scale(expdist)
hist(simulation,probability=T)
lines(density(simulation))
# Compare with the standard normal distribution
curve(dnorm(x,0,1), -3, 3, col="red", add=T)
?set.seed
lowercl <- simulatoin - qnorm(0.975) * (1/0.2)/sqrt(40)
data(ToothGrowth)
head(ToothGrowth)
dim(ToothGrowth)
?str
library(ggplot2)
ggplot(aes(x=dose, y = len), data = ToothGrowth) +
geom_point(aes(color = supp))
library(ggplot2)
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose)
summary(ToothGrowth)
by(ToothGrowth$len, INDICES = list(ToothGrowth$supp, ToothGrowth$dose), length)
by(ToothGrowth$len, INDICES = list(ToothGrowth$supp, ToothGrowth$dose), summary)
ToothDoseQJ0510 <- subset(ToothGrowth, dose %in% c(0.5, 1.0), supp == "QJ")
ToothDoseQJ1020 <- subset(ToothGrowth, dose %in% c(1.0, 2.0), supp == "QJ")
ToothDoseQJ0520 <- subset(ToothGrowth, dose %in% c(0.5, 2.0), supp == "QJ")
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDoesQJ0510)
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDoesQJ1020)
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDoesQJ0520)
ToothDoseQJ0510 <- subset(ToothGrowth, dose %in% c(0.5, 1.0), supp == "QJ")
ToothDoseQJ1020 <- subset(ToothGrowth, dose %in% c(1.0, 2.0), supp == "QJ")
ToothDoseQJ0520 <- subset(ToothGrowth, dose %in% c(0.5, 2.0), supp == "QJ")
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDoseQJ0510)
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDoseQJ1020)
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDoseQJ0520)
View(ToothDoseQJ0510)
View(ToothGrowth)
ToothDoseQJ0510 <- subset(ToothGrowth, dose %in% c(0.5, 1.0), supp = "QJ")
ToothDoseQJ1020 <- subset(ToothGrowth, dose %in% c(1.0, 2.0), supp = "QJ")
ToothDoseQJ0520 <- subset(ToothGrowth, dose %in% c(0.5, 2.0), supp = "QJ")
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDoseQJ0510)
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDoseQJ1020)
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDoseQJ0520)
View(ToothDoseQJ0510)
?subset
ToothDoseQJ0510 <- subset(ToothGrowth, dose %in% c(0.5, 1.0) & supp = "QJ")
ToothDoseQJ0510 <- subset(ToothGrowth, dose %in% c(0.5, 1.0) & (supp = "QJ"))
ToothDoseQJ1020 <- subset(ToothGrowth, dose %in% c(1.0, 2.0), supp = "QJ")
View(ToothDoseQJ0520)
ToothDose0510 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
ToothDose1020 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
ToothDose0520 <- subset(ToothGrowth, dose %in% c(0.5, 2.0))
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDose0510)
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDose1020)
t.test(len ~ dose, paired = F, var.equal = F, data = ToothDose0520)
ToothDoseQJ0510 <- subset(ToothDose0510, supp = "QJ")
View(ToothDose0510)
View(ToothDoseQJ0510)
ToothDoseQJ0510 <- subset(ToothDose0510, supp == "QJ")
View(ToothDose0510)
ToothDoseQJ0510 <- subset(ToothDose0510, supp = "QJ")
subset(ToothDose0510, supp = "QJ")
subset(ToothDose0510, supp = 'QJ')
subset(ToothDose0510, select = QJ)
subset(ToothDose0510, select = "QJ")
subset(ToothDose0510, supp=QJ)
ToothDose0510
View(ToothDose0510)
ToothDoseQJ0510 <- subset(ToothDose0510, supp = "OJ")
subset(ToothDose0510, supp = "OJ")
subset(ToothDose0510, supp == "OJ")
## Appendix
## Data
### Set the data
```{r}
set.seed(2)
n <- 40
lambda <- 0.2
nsim <- 1000
```
### Simulation
```{r}
simulation <- rowMeans(matrix(rexp(n*nsim, lambda), nsim, n))
```
set.seed(2)
n <- 40
lambda <- 0.2
nsim <- 1000
simulation <- rowMeans(matrix(rexp(n*nsim, lambda), nsim, n))
m <- 10
alpha <- .05
alphaFwer <- alpha / m
alphaFwer
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x*w
mean(z)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit.origin <- lm( y ~ x - 1 )
summary(fit.origin)
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m.x <- mean(x)
sd.x <- sd(x)
(x[1] - m.x)/sd.x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm( y ~ x )
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
e <- resid(fit)
sqe <- e*e
res.var <- sum(sqe) / (length(e) - 2)
sqrt(res.var)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2]
exp - 2 * 0.5591
?mtcars
summary(fit)
summary(fit)
fit[[1]][1] + 3 * fit[[1]][2]
summary(fit)
2 * (fit$coefficients[2] - 2 * 0.5591)
attributes(fit)
w.c <- fit$residuals ^ 2
fit.c <- lm(mpg ~ 1, mtcars)
fit.c.res <- fit.c$residuals ^ 2
sum(fit.c.res)
sum(w.c) /sum(fit.c.res)
summary(fit)
fit[[1]][1] + 3 * fit[[1]][2]
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
lm.influence(fit)$hat
dfbetas(fit)
fit2 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl)*wt, mtcars)
summary(fit3)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength,
p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
featurePlot(x = training[,c('Cement',
'BlastFurnaceSlag',
'FlyAsh',
'Water',
'Superplasticizer',
'CoarseAggregate',
'FineAggregate', 'Age')],
y = training$CompressiveStrength )
install.packages('AplliedPredictiveModeling')
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
featurePlot(x = training[,c('Cement',
'BlastFurnaceSlag',
'FlyAsh',
'Water',
'Superplasticizer',
'CoarseAggregate',
'FineAggregate', 'Age')],
y = training$CompressiveStrength )
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength,
p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data=training)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis,
p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh = 0.8, outcome = training$diagnosis)
preProc
ss
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ss, testing$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = testing$diagnosis)
model2
model1
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis,
p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh = 0.9, outcome = training$diagnosis)
proProc
preProc
```
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))
library(datasets)
mpgData <- with(mtcars, data.frame(mpg, am))
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))
data(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
mtcars$vs   <- as.factor(mtcars$vs)
## Compare MPG to all other variables by fitting linear model.
fitMpgOverAll <- lm(mpg ~ ., data = mtcars)
summary(aov(fitMpgOverAll))
fit1<-lm(data = mtcars, mpg ~ am)
fit2<-lm(data = mtcars, mpg ~ am + cyl)
fit3<-lm(data = mtcars, mpg ~ am + cyl + disp)
fit4<-lm(data = mtcars, mpg ~ am + cyl + disp + wt)
fit5<-lm(data = mtcars, mpg ~ am + cyl + disp + wt + hp)
summary(fit4)$coefficients[1:2,]
### Compare tooth growth by supplement types
* First, compare the supplement types across the three dosage amounts
From the test result, we can see that, the confidence interval is [-0.17, 7.57]. Therefore, we cannot reject the null hypothesis that there is not a significant difference in tooth length between the two supplement types.
* Second, compare the supplement types in each dosage amount
From the test result, we can see that, the confidence interval are [1.72, 8,78],  [2.80, 9.06] and [-3.80, 3.64] for the three tests. Therefore, we can reject the null hypothesis that there is a significant difference in tooth length between the two supplement types at dosage = 0.5 mg and dosage = 1.0 mg. And we cannot reject the null hypothesis that there is not a significant difference in tooth length between the two supplement types at dosage = 2.0 mg
### Compare tooth growth by dosage amount
From the test result, we can see that, the confidence intervals are all negative for the three tests.  we can reject the null hypothesis that there is a significant difference in tooth length by dosage amount.
## State your conclusions and the assumptions needed for your conclusions.
### Conclusions
* For different supplement types, there is significant difference in length of tooth when the dosage amount is smal, but no significant difference when the dosage amount is large.
* For different dosage amount, there is always significant difference in length of tooth with any methods. Higher dosage amount leads to longer teeth growth.
## Appendix
### Load the data
```{r}
data(ToothGrowth)
fit1<-lm(data = mtcars, mpg ~ am)
fit2<-lm(data = mtcars, mpg ~ am + cyl)
fit3<-lm(data = mtcars, mpg ~ am + cyl + disp)
fit4<-lm(data = mtcars, mpg ~ am + cyl + disp + wt)
fit5<-lm(data = mtcars, mpg ~ am + cyl + disp + wt + hp)
summary(fit4)$coefficients[1:2,]
c(summary(fit1)$r.squared,
summary(fit4)$r.squared)
data(mtcars)
t.test(mpg ~ am, data = mtcars)
24.39-17.15
hist(mtcars$am)
?density plot
?density
density(mtcars$am)
plot(density(mtcars$am))
mtcars$am
model2<-lm(data = mtcars, mpg ~ cyl + disp + wt + am)
summary(model2)$coefficients[1:2,]
model2<-lm(data = mtcars, mpg ~ cyl + disp + wt + am)
summary(model2)
model2<-lm(data = mtcars, mpg ~ am + cyl + disp + wt)
summary(model2
)
summary(model1)$coefficients[1:2,]
model1<-lm(data = mtcars, mpg ~ am)
summary(model1)$coefficients[1:2,]
summary(model1)$coefficients[1:2,]
model2<-lm(data = mtcars, mpg ~ am + cyl + disp + wt)
summary(model2)$coefficients[1:2,]
model2<-lm(data = mtcars, mpg ~ cyl + disp + wt + am)
summary(model2)$coefficients[1:2,]
summary(model2)
model2<-lm(data = mtcars, mpg ~ am + cyl + disp + wt + hp)
summary(model1)$coefficients[1:2,]
summary(model2)$coefficients[1:2,]
model2<-lm(data = mtcars, mpg ~ am + cyl + disp + wt + hp + qsec)
summary(model1)$coefficients[1:2,]
summary(model2)$coefficients[1:2,]
c(summary(model1)$r.squared, summary(model2)$r.squared)
model2<-lm(data = mtcars, mpg ~ am + cyl + disp + wt + hp)
> summary(model1)$coefficients[1:2,]
model2<-lm(data = mtcars, mpg ~ am + cyl + disp + wt + hp)
c(summary(model1)$r.squared, summary(model2)$r.squared)
library(knitr)
library(caret)
library(randomForest)
library(pander)
setwd("~/Practical-Machine-Learning-Project/")
if (!"pml-training.csv" %in% dir("./Data/")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "./Data/pml-training.csv")
}
if (!"pml-testing.csv" %in% dir("./Data/")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "./Data/pml-testing.csv")
}
if (!"training" %in% ls()) {
training <- read.csv("./Data/pml-training.csv", sep = ",", na.strings=c("NA",""))
}
if (!"testing" %in% ls()) {
testing <- read.csv("./Data/pml-testing.csv", sep = ",")
}
columnNACounts <- colSums(is.na(training))
badColumns <- columnNACounts >= 19216
cleanTrainingdata <- training[!badColumns]
columnNACounts <- colSums(is.na(testing))
badColumns <- columnNACounts >= 20
cleanTestingdata <- testing[!badColumns]
cleanTrainingdata <- cleanTrainingdata[, -c(1:6)]
cleanTestingdata <- cleanTestingdata[, -c(1:6)]
library(knitr)
library(caret)
library(randomForest)
library(e1071)
partition <- createDataPartition(y = cleanTrainingdata$classe, p = 0.6, list = FALSE)
trainingdata <- cleanTrainingdata[partition, ]
testdata <- cleanTrainingdata[-partition, ]
trainInds <- sample(nrow(cleanTrainingdata), 3000)
trainingdata<-cleanTrainingdata[trainInds,]
model <- train(classe~., method = "rf", data = trainingdata)
trainInds <- sample(nrow(cleanTrainingdata), 100)
trainingdata<-cleanTrainingdata[trainInds,]
model <- train(classe~., method = "rf", data = trainingdata)
model
trainInds <- sample(nrow(cleanTrainingdata), 3000)
trainingdata<-cleanTrainingdata[trainInds,]
model <- train(classe~., method = "rf", data = trainingdata)
testing_pred <- predict(model, testdata)
confusionMatrix(testing_pred, testdata$classe)
answers <- predict(model, cleanTestingdata)
answers <- as.character(answers)
answers
pml_write_files = function(x) {
n = length(x)
for (i in 1:n) {
filename = paste0("problem_id_", i, ".txt")
write.table(x[i], file = filename, quote = FALSE, row.names = FALSE,
col.names = FALSE)
}
}
pml_write_files(answers)
library(knitr)
library(caret)
library(randomForest)
library(e1071)
partition <- createDataPartition(y = cleanTrainingdata$classe, p = 0.6, list = FALSE)
trainingdata <- cleanTrainingdata[partition, ]
testdata <- cleanTrainingdata[-partition, ]
model <- train(classe ~ ., data = trainingdata, method = "rf", prox = TRUE,
trControl = trainControl(method = "cv", number = 4, allowParallel = TRUE))
setwd("~/Practical-Machine-Learning-Project/")
if (!"pml-training.csv" %in% dir("./Data/")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "./Data/pml-training.csv")
}
if (!"pml-testing.csv" %in% dir("./Data/")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "./Data/pml-testing.csv")
}
if (!"training" %in% ls()) {
trainData <- read.csv("./Data/pml-training.csv", sep = ",", na.strings=c("NA",""))
}
if (!"testing" %in% ls()) {
testData <- read.csv("./Data/pml-testing.csv", sep = ",")
}
dim(trainData)
dim(testData)
trControl = trainControl(method = "cv", number = 4, allowParallel = TRUE))
colNAnumber <- colSums(is.na(trainData))
colNA <- colNAnumber >= 19216
trainData <- trainData[!colNA]
colNAnumber <- colSums(is.na(testData))
colNA <- columnNAnumber >= 20
TestData <- testData[!colNA]
colNAnumber <- colSums(is.na(trainData))
colNA <- colNAnumber >= 19216
trainData <- trainData[!colNA]
colNAnumber <- colSums(is.na(testData))
colNA <- colNAnumber >= 20
TestData <- testData[!colNA]
colNAnumber <- colSums(is.na(trainData))
colNA <- colNAnumber >= 19216
trainData <- trainData[!colNA]
colNAnumber <- colSums(is.na(testData))
colNA <- colNAnumber >= 20
testData <- testData[!colNA]
trainData <- trainData[, -c(1:6)]
testData <- testData[, -c(1:6)]
plot(TrainData$classe, xlab = "Class Type", ylab = "Counts")
plot(trainData$classe, xlab = "Class Type", ylab = "Counts")
library(knitr)
library(caret)
library(randomForest)
library(e1071)
classify <- createDataPartition(y = trainData$classe, p = 0.6, list = FALSE)
trainData2 <- trainData[classify, ]
testData2 <- trainData[-classify, ]
setwd("~/Practical-Machine-Learning-Project/")
if (!"pml-training.csv" %in% dir("./Data/")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "./Data/pml-training.csv")
}
if (!"pml-testing.csv" %in% dir("./Data/")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "./Data/pml-testing.csv")
}
if (!"training" %in% ls()) {
trainData <- read.csv("./Data/pml-training.csv", sep = ",", na.strings=c("NA",""))
}
if (!"testing" %in% ls()) {
testData <- read.csv("./Data/pml-testing.csv", sep = ",")
}
dim(trainData)
dim(testData)
setwd("~/Practical-Machine-Learning-Project/")
if (!"pml-training.csv" %in% dir("./Data/")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "./Data/pml-training.csv")
}
if (!"pml-testing.csv" %in% dir("./Data/")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "./Data/pml-testing.csv")
}
if (!"training" %in% ls()) {
trainData <- read.csv("./Data/pml-training.csv", sep = ",", na.strings=c("NA",""))
}
if (!"testing" %in% ls()) {
testData <- read.csv("./Data/pml-testing.csv", sep = ",")
}
dim(trainData)
dim(testData)
setwd("~/Practical-Machine-Learning-Project/")
if (!"pml-training.csv" %in% dir("./Data/")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "./Data/pml-training.csv")
}
if (!"pml-testing.csv" %in% dir("./Data/")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "./Data/pml-testing.csv")
}
if (!"trainData" %in% ls()) {
trainData <- read.csv("./Data/pml-training.csv", sep = ",", na.strings=c("NA",""))
}
if (!"testData" %in% ls()) {
testData <- read.csv("./Data/pml-testing.csv", sep = ",")
}
dim(trainData)
dim(testData)
